<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(ProjectDir)..\bin\Debug\DryIoc.dll" #>
<#@ assembly Name="$(ProjectDir)..\bin\Debug\DryIoc.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="DryIoc.UnitTests.CUT" #>
<#@ import Namespace="System.Diagnostics" #>
<#@ import Namespace="System.Text" #>
<#@ import Namespace="System.IO" #>
<#@ import Namespace="System.Linq" #>
<#@ import Namespace="System.Collections.Generic" #>
namespace DryIoc.CompileTimeOperationTests
{
    using DryIoc;
    using AR = AttributedRegistrator;

    public static class CompileTimeGeneratedRegistrator
    {
        public static RegistrationInfo[] Registrations =
        {
<#
        var assembly = typeof(TransientService).Assembly;
        var infos = AttributedRegistrator.ScanAssemblies(new [] { assembly });

        Func<bool, string> asBool = x => x ? "true" : "false";
        Func<string, string> asString = x => x == null ? "null" : "\"" + x + "\"";
        Func<Type, string> asTypeof = x => x == null ? "null" : "typeof(" + x.Print() + ")";
        Func<Type, object, string> asEnum = (t, x) => t.Print() + "." +  Enum.GetName(t, x);

        foreach (var info in infos)
        {
#>
            new RegistrationInfo {
                ImplementationType = <#= asTypeof(info.ImplementationType) #>,
                Exports = new[] {
<#
            foreach (var x in info.Exports) 
            {
#>
                    new ExportInfo { ServiceType = <#= asTypeof(x.ServiceType) #>, ServiceName = <#= asString(x.ServiceName) #> },
<#
            }
#>
                },
                IsSingleton = <#= asBool(info.IsSingleton) #>,
                MetadataAttributeIndex = <#= info.MetadataAttributeIndex #>,
                FactoryType = <#= asEnum(typeof(FactoryType), info.FactoryType) #>,
                GenericWrapperServiceTypeIndex = <#= info.GenericWrapperServiceTypeIndex #>,
                DecoratorServiceName = <#= asString(info.DecoratorServiceName) #>, 
                DecoratorShouldCompareMetadata = <#= asBool(info.DecoratorShouldCompareMetadata) #>, 
                DecoratorConditionType = <#= asTypeof(info.DecoratorConditionType) #>
            },
<#
        }
#>
        };
    }
}