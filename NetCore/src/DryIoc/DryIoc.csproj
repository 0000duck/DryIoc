<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net35;net40;net45;netstandard1.0;netstandard1.3;netstandard2.0;portable-net45+win8+wpa81+wp8;portable-net40+win8+wpa81+wp8+sl5</TargetFrameworks>

        <VersionPrefix>3.1.0</VersionPrefix>
        <VersionSuffix>preview-01</VersionSuffix>
        <AssemblyVersion>$(VersionPrefix)</AssemblyVersion>

        <AssemblyName>DryIoc</AssemblyName>
        <AssemblyTitle>$(AssemblyName) $(TargetFramework)</AssemblyTitle>
        <PackageId>$(AssemblyName).dll</PackageId>

        <Authors>Maksim Volkau</Authors>
        <Description>DryIoc is fast, small, full-featured IoC Container for .NET</Description>
        <Copyright>Copyright © 2013-2018 Maksim Volkau</Copyright>
        <NeutralLanguage>en</NeutralLanguage>
        <PackageLicenseUrl>https://github.com/dadhi/DryIoc/blob/master/LICENSE.txt</PackageLicenseUrl>
        <PackageProjectUrl>https://github.com/dadhi/DryIoc</PackageProjectUrl>
        <PackageIconUrl>https://github.com/dadhi/DryIoc/blob/master/logo64.png</PackageIconUrl>
        <RepositoryType>git</RepositoryType>
        <RepositoryUrl>https://github.com/dadhi/DryIoc</RepositoryUrl>
        <PackageTags>IoC Container Inversion-of-Control DI Dependency-Injection DRY Service-Provider Factory FastExpressionCompiler ImTools</PackageTags>
        <PackageReleaseNotes>
            <![CDATA[
v3.1.0
- fixed: BB-593 Add auto-generated tag to PCL FEC
- fixed: BB-594 Conflicting type is not working in .NET Core 2.1
- fixed: BB-596 The problem was in non-public service type
- fixed: #6 Open generic singleton service registration that satisfies multiple interfaces
- fixed: #7 Context-based injection
- fixed: #16 AutoConcreteTypeResolution should not consider a primitive type
- fixed: #25 Decorator with serviceKey throws exception which gives invalid advice on how to fix the issue for the most common reason to use the servicekey
- fixed: RegisterMapping for open-generic service type
- fixed: Using facadeKey in CreateFacade
- added: #4 Rule for Func and Lazy to be resolved even without requested service registered
- added: #9 RegisterMany should indicate if no registration was made
- added: #17 Rules.DefaultRegistrationServiceKey enhancement
- added: FactoryInfo.Of(MemberInfo factoryMember, object factoryInstance)
- added: Explicit Factory.RegistrationOrder and adapted its usage for open-generics
- added: IRegistrator.GetRegisteredFactories
- added: FactoryType to Registrator.RegisterMapping
- changed: #11 Resolution root bound dependency expression de-duplication
- changed: #8 Parity of registration methods between IContainer and IRegistrator (RegisterMapping and RegisterPlaceholder are available in IRegistrator)

v3.0.2
- fixed: NetStandard 1.3 and 2.0 package targets to be based on NetStandard 1.0 to be better aligned with extensions

v3.0.1
- added: NetStandard 2.0 package target with no dependencies

v3.0.0
- Release Notes https://bitbucket.org/dadhi/dryioc/wiki/Version3ReleaseNotes

        ]]></PackageReleaseNotes>

        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <DebugType>embedded</DebugType>
        <DebugSymbols>true</DebugSymbols>
    </PropertyGroup>

    <ItemGroup>
        <None Include="..\..\LICENSE.txt" Pack="true" PackagePath="LICENSE" Visible="false" />
        <None Remove="**\*.orig" />
        <None Remove="**\*.ncrunch*" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.3.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.3.0" />
    </ItemGroup>

    <!--PCL Profile259-->
    <PropertyGroup Condition="'$(TargetFramework)' == 'portable-net45+win8+wpa81+wp8'">
        <AssemblyTitle>$(AssemblyName) PCL259</AssemblyTitle>
        <DefineConstants>PCL;PCL259</DefineConstants>
        <TargetFrameworkIdentifier>.NETPortable</TargetFrameworkIdentifier>
        <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
        <TargetFrameworkProfile>Profile259</TargetFrameworkProfile>
        <NugetTargetMoniker>.NETPortable,Version=v0.0,Profile=Profile259</NugetTargetMoniker>
        <LanguageTargets>$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets</LanguageTargets>
    </PropertyGroup>

    <!--PCL Profile328-->
    <PropertyGroup Condition="'$(TargetFramework)' == 'portable-net40+win8+wpa81+wp8+sl5'">
        <AssemblyTitle>$(AssemblyName) PCL328</AssemblyTitle>
        <DefineConstants>PCL;PCL328</DefineConstants>
        <TargetFrameworkIdentifier>.NETPortable</TargetFrameworkIdentifier>
        <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
        <TargetFrameworkProfile>Profile328</TargetFrameworkProfile>
        <NugetTargetMoniker>.NETPortable,Version=v0.0,Profile=Profile328</NugetTargetMoniker>
        <LanguageTargets>$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets</LanguageTargets>
    </PropertyGroup>

</Project>
