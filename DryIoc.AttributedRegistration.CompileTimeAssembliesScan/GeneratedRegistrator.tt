<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(ProjectDir)..\bin\Debug\DryIoc.dll" #>
<#@ assembly Name="$(ProjectDir)..\bin\Debug\DryIoc.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="DryIoc.UnitTests.CUT" #>
<#@ import Namespace="System.Diagnostics" #>
<#@ import Namespace="System.Text" #>
<#@ import Namespace="System.IO" #>
<#@ import Namespace="System.Linq" #>
<#@ import Namespace="System.Collections.Generic" #>
namespace DryIoc.AttributedRegistration.CompileTimeAssembliesScan
{
    using FunIoc;
    using AR = AttributedRegistrator;

    public static class GeneratedRegistrator
    {
        public static void RegisterAll(this IRegistrator registrator)
        {
            ReflectingFactory factory;
<#
var assembly = typeof(TransientService).Assembly;
var serviceInfos = AttributedRegistrator.Scan(new [] { assembly });
foreach (var info in serviceInfos)
{
    var implementationType = "typeof(" + info.ImplementationType.Print() + ")";
    var reuse = info.IsSingleton ? "Reuse.Singleton" : "Reuse.Transient";
    var metadata = info.MetadataAttributeIndex == -1 ? "null" : "AR.FindMetadata(" + implementationType + ", " + info.MetadataAttributeIndex + ")";
#>

            factory = new ReflectingFactory(<#=implementationType#>, <#=reuse#>, <#=metadata#>, AR.FindSingleImportingConstructor);
<#
    var contracts = info.Contracts;
    for (var i = 0; i < contracts.Length; i++)
    {
        var contract = contracts[i];

        var serviceType = "typeof(" + contract.ServiceType.Print() + ")";
        var serviceName = contract.ServiceName == null ? "null" : ("\"" + contract.ServiceName + "\"");
#>
            registrator.Register(factory, <#= serviceType #>, <#= serviceName #>);
<#
    }
}
#>
        }
    }
}