<#
//
// TODO: PLEASE ADD TO YOUR PROJECT 
// a new Text Template file "Registrations.ttinclude"
// and copy the contents of this file into it.
// 
//=============================================================================================
// TODO: Change the code below to
// 1. Configure DryIoc.container with your rules and conventions.
// 2. Register your services.
// 3. Identify the resolution roots: the services to be Resolved, rather then injected.
// 4. Save the DryIocZero/Container.Generated.tt class. Confirm the VisualStudio prompt if any.
// 5. Check the Container.Generated.cs for general compilation and listed resolution errors.
//=============================================================================================
#>
<##>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>
<#// TODO: Insert assemblies and namespaces with your services to register in container #>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIocAttributes.dll" #>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>
<#@ import namespace="ImTools" #>
<#+
// TODO: Setup container and add service registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container()
        .WithMef();

    var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
    container.RegisterExports(types);

    return container;
}

// TODO: Filter the root services to generate expressions for ...
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    return !reg.AsResolutionRoot ? null
        : reg.ServiceType == typeof(IOpGen<>) ? reg.ToServiceInfo<IOpGen<string>>().One()
        : reg.ToServiceInfo().One();
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = {};
#>