<#
// TODO:
// 1. Fill-in `GetContainerWithRegistrations` method below with creation of DryIoc `Container` and registrations.
// 2. Specify the resolution roots via `SpecifyResolutionRoots` method, see example below.
// 3. Re-save the "Container.Generated.tt" file. Confirm the Visual Studio prompt if any.
// 4. Check the "Container.Generated.cs" for the generated results and issues.
//
// Note: 
// - When specifying assembly path, you may use $(SolutionDir), $(ProjectDir), $(Configuration) parameters.
//
// Should be regenerated in RELEASE mode - to match the DryIoc.dll in NuGet/tools/DryIoc/net45/DryIoc.dll
#>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>
<#// TODO: Insert assemblies and namespaces with your services to register in container #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\DryIocAttributes.dll" #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\DryIoc.MefAttributedModel.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>
<#@ import namespace="ImTools" #>
<#+
// TODO: Setup container and add service registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container()
        .WithMef();

    var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
    container.RegisterExports(types);

    return container;
}

// TODO: Filter the root services to generate expressions for ...
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    return !reg.AsResolutionRoot ? null
        : reg.ServiceType == typeof(IOpGen<>) ? reg.ToServiceInfo<IOpGen<string>>().One()
        : reg.ToServiceInfo().One();
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = {};

// TODO: Specify the namespace to go into using instead of qualify the type all the times, 
// You may generate the Container.Generated.cs first, then look what you want to move to using
string[] NamespaceUsings =
{
    //"Foo.Bar.Buzz",
    "DryIoc.MefAttributedModel.UnitTests.CUT"
};
#>