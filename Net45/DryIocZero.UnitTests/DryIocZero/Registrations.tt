<#
//=======================================================================
// The code below operates on DryIoc.Container. 
// The result will be resolution delegates generated by DryIoc.Container,
// then these delegates will be used by DryIocZero.Container at run-time.
//
// TODO: Change the code below to:
// 1. Configure DryIoc.container with your rules and conventions.
// 2. Register your services and implementations. 
// Please ensure to include assemblies and namespaces where they reside.
// 3. Identify the resolution roots: the services to be Resolved, rather then injected.
//
//=======================================================================
#>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>

<#// TODO: Insert assemblies and namespaces with your services to register in container #>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIocAttributes.dll" #>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>

<#+
// TODO: Setup container and add service registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container()
        .WithMef();

    // NOTE: `RegisterDelegate` and `RegisterInstance` are not supported because of runtime state usage. 
    // Instead you can use `Register(Made.Of(() => CreateMyService()))` registrations,
    // which are preferred over Delegate/Instance cause container may inspect and warn you on possible resolution errors.

    var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
    container.RegisterExports(types);

    return container;
}

// TODO: Identify resolution roots services. Return true for the service you'll expect to Resolve from container.
bool IsResolutionRoot(ServiceRegistrationInfo info)
{
    // EXAMPLE: The `SetupAsResolutionRoots` will select services registered with `Setup.With(asResolutionRo1ot: true)`
    return ContainerTools.SetupAsResolutionRoots(info);
}
#>