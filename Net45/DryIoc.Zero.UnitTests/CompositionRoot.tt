<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\DryIoc.dll" #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\DryIoc.MefAttributedModel.dll" #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ assembly Name="$(ProjectDir)\..\bin\Release\ExpressionToCodeLib.dll" #>
<#@ import Namespace="System.Linq" #>
<#@ import Namespace="System.Text" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>
<#@ import Namespace="ExpressionToCodeLib.Unstable_v2_Api" #>
<#
var container = new Container(rules => rules
    .WithoutSingletonOptimization()
    .WithMefAttributedModel());

// NOTE: Specify implementation types to Register here:
//=====================================================
var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
container.RegisterExports(types);
//=====================================================
#>
using System.Linq; // for Enumerable.Cast method required for LazyEnumerable<T>

namespace DryIoc.Zero.UnitTests
{
    public sealed class CompositionRoot : ICompositionRoot
    {
        public static readonly ICompositionRoot Default = new CompositionRoot();        
        public void RegisterGeneratedRoots(IFactoryDelegateRegistrator registrator)
        {
<#
    var exprToCode = ExpressionStringify.With(fullTypeNames: true, explicitMethodTypeArgs: true);

    var registrations = container.GetServiceRegistrations().Where(r => !r.ServiceType.IsGenericDefinition());
    foreach (var r in registrations)
    {
        try
        {
            var factoryExpr = container.Resolve<FactoryExpression<object>>(r.OptionalServiceKey, IfUnresolved.Throw, r.ServiceType);
            
            var serviceTypeName = ObjectStringify.WithFullTypeNames.PlainObjectToCode(r.ServiceType, typeof(Type));
            var delegateBody = exprToCode.ToCode(factoryExpr.Value.Body);

            if (r.OptionalServiceKey == null)
            {
#>
            registrator.Register(<#=serviceTypeName #>, 
                (r, scope) => <#=delegateBody #>);

<#
            }
            else
            {
                var serviceKeyString = new StringBuilder().AppendCode(r.OptionalServiceKey).ToString();
#>
            registrator.Register(<#=serviceTypeName #>, <#=serviceKeyString#>, 
                (r, scope) => <#=delegateBody #>);

<#
            }
        }
        catch (Exception ex)
        {
#>
/* 
Resolution of <#=ObjectStringify.WithFullTypeNames.TypeNameToCode(r.ServiceType)#>
Failed with: <#=ObjectStringify.WithFullTypeNames.TypeNameToCode(ex.GetType())#>
----------------------
<#=ex.Message#>
*/
<#
        }
    }
#>
        } // end of registrations
    }
}