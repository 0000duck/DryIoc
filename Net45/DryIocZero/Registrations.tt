<#
//=======================================================================
// The code is provided by User:
// You may configure container,
// Register your services,
// And return container for resolution generation.
//
// GetContainerWithRegistrations implementation below is just an EXAMPLE!
//=======================================================================
#>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.dll.2.10.0\lib\net45\DryIoc.dll" #>
<#@ import Namespace="DryIoc" #>

<#@ assembly Name="$(SolutionDir)packages\DryIocAttributes.dll.3.0.0-preview-01\lib\net45\DryIocAttributes.dll" #>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.MefAttributedModel.dll.3.0.0-preview-04\lib\net45\DryIoc.MefAttributedModel.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>

<#/* TODO: Replace it with your assemblies to get registrations from */#>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>

<#+
// Specify your container and registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container().WithMef();

    // TODO: Replace with your assemblies and types. 
    var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
    container.RegisterExports(types);

    // NOTE: RegisterDelegate and RegisterInstance are not supported because of runtime state usage. 
    // Instead you can use Register(Made.Of(() => GetSomething())) registrations which generally are preferred over Delegate/Instance
    // because container may inspect and warn you on possible resolution errors.
    // Below registration is not supported and will output error message during generation.
    // container.RegisterDelegate(_ => "delegate result", setup: Setup.With(asResolutionRoot: true));

    return container;
}

// Specify what resolution roots should be generated
bool IsResolutionRoot(ServiceRegistrationInfo info)
{
    // EXAMPLE: I am selecting the roots registered with Setup.With(asResolutionRoot: true) or AsResolutionRootAttribute.
    // You may apply any custom filter against input ServiceRegistrationInfo.
    return ContainerTools.SetupAsResolutionRoots(info);
}
#>