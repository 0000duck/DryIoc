<#
//=======================================================================
// The code below operates on DryIoc.Container.
// The result will be resolution delegates generated by DryIoc.Container,
// then these delegates will be used by DryIocZero.Container at run-time.
//
// TODO: Change the code below to:
// 1. Configure DryIoc.container with your rules and conventions.
// 2. Register your services and implementations. 
// Please ensure to include assemblies and namespaces where they reside.
// 3. Identify the resolution roots: the services to be Resolved, rather then injected.
// 4. When done Save the DryIocZero/Container.Generated.tt class. Confirm on VisualStudio prompt if any.
// 5. Check result Container.Generated.cs for general compilation errors 
// and for resolution errors listed under comment "FAILED to generate resolution for"
//
//=======================================================================
#>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.dll.2.11.3\lib\net45\DryIoc.dll" #>
<#@ import Namespace="DryIoc" #>

<#// TODO: Insert assemblies and namespaces with your services to register in container #>

<#+
// TODO: Specify your container and registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    // NOTE: `RegisterDelegate` and `RegisterInstance` are not supported because of runtime state usage. 
    // Instead you can use `Register(Made.Of(() => CreateMyService()))` registrations,
    // which are preferred over Delegate/Instance cause container may inspect and warn you on possible resolution errors.

    // TODO: Add registrations
    // container.Register<IMyServive, MyService>();

    return container;
}

// TODO: Identify resolution roots services. Return true for the service you'll expect to Resolve from container.
bool IsResolutionRoot(ServiceRegistrationInfo info)
{
    // EXAMPLE: The `SetupAsResolutionRoots` will select services registered with `Setup.With(asResolutionRo1ot: true)`
    return ContainerTools.SetupAsResolutionRoots(info);
}
#>