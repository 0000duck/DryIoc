/*
The MIT License (MIT)

Copyright (c) 2013 Maksim Volkau

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.dll.2.0.0-rc3build335\lib\net45\DryIoc.dll" #>
<#@ assembly Name="$(SolutionDir)packages\DryIocAttributes.dll.2.0.0-rc3build335\lib\net45\DryIocAttributes.dll" #>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.MefAttributedModel.dll.2.0.0-rc3build335\lib\net45\DryIoc.MefAttributedModel.dll" #>
<#@ assembly Name="$(SolutionDir)packages\ExpressionToCodeLib.1.5.4.0\lib\net40-Client\ExpressionToCodeLib.dll" #>
<#@ import Namespace="System.Linq" #>
<#@ import Namespace="System.Linq.Expressions" #>
<#@ import Namespace="System.Text" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>
<#@ import Namespace="ExpressionToCodeLib.Unstable_v2_Api" #>
<#
// User code goes from here:
// -------------------------
// - Add assemblies with implementation types to register
#>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>
<#
// - Configure container for compile-time gen and use MEF to discover types
var container = new Container().WithMefAttributedModel();

// - Register implementation types
var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
container.RegisterExports(types);

ImTreeMap<KV<Type, object>, Expression> resolutionRoots;
ImTreeMap<RequestInfo, Expression> resolutionCallDependencies;
ImTreeMap<KV<Type, object>, ContainerException> resolutionErrors;
container.GenerateResolutionFactoryExpressions(out resolutionRoots, out resolutionCallDependencies, out resolutionErrors);

var exprToCode = ExpressionStringify.With(fullTypeNames: true, explicitMethodTypeArgs: true);
var objectToCode = ObjectStringify.WithFullTypeNames;

var factories = resolutionRoots.Enumerate()
   .Select((r, i) =>
    {
        var serviceTypeCode = objectToCode.PlainObjectToCode(r.Key.Key, typeof(Type));
        var serviceKeyCode = r.Key.Value == null ? "null" : new StringBuilder().AppendCode(r.Key.Value).ToString();
        var expressionCode = exprToCode.ToCode(r.Value);
        return new { Id = i, Type = serviceTypeCode, Key = serviceKeyCode, Expression = expressionCode };
    })
    .Where(r => r != null)
    .ToArray();

var errors = resolutionErrors.Enumerate().Select(e => e.Value).ToArray();
#>
using System;
using System.Linq; // for Enumerable.Cast method required for LazyEnumerable<T>
using System.Collections.Generic;

namespace DryIocZero
{
/* 
Exceptions during resolution:
-----------------------------
<#
    if (errors.Length == 0)
        WriteLine("All is fine");
    foreach (var ex in errors)
    {
#>
<#=objectToCode.TypeNameToCode(ex.GetType())#>:
<#=ex.Message#>

<#
    }
#>
-----------------------------
end of exception list
*/

    partial class Container
    {
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        partial void ResolveGenerated(ref object service, Type serviceType, IScope scope)
        {
<#
        var count = 0;
        foreach (var factory in factories.Where(f => f.Key == "null"))
        {
            if (count++ > 0) WriteLine(@"
            else");
#>
            if (serviceType == <#= factory.Type #>)
                service = Create_<#= factory.Id #>(this, scope);
<#
        }
#>
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        partial void ResolveGenerated(ref object service, Type serviceType, object serviceKey, Type requiredServiceType, DryIoc.RequestInfo preRequestInfo, IScope scope)
        {
<#
        var groupCount = 0;
        foreach (var factoryGroup in factories.Where(f => f.Key != "null").GroupBy(f => f.Type))
        {
            if (groupCount++ > 0) WriteLine(@"
            else");
#>
            if (serviceType == <#= factoryGroup.Key #>) 
            {
<#
            var inGroupCount = 0;
            foreach (var factory in factoryGroup)
            {
                if (inGroupCount++ > 0) WriteLine(@"
                else");
#>
                if (<#= factory.Key #>.Equals(serviceKey))
                    service = Create_<#= factory.Id #>(this, scope);
<#
            }

#>
            }
<#
        }
#>
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        partial void ResolveManyGenerated(ref IEnumerable<KV> services, Type serviceType) 
        {
            services = ResolveManyGenerated(serviceType);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        private IEnumerable<KV> ResolveManyGenerated(Type serviceType)
        {
<#
        foreach (var factoryGroup in factories.GroupBy(f => f.Type))
        {
#>
            if (serviceType == <#= factoryGroup.Key #>)
            {
<#
            foreach (var factory in factoryGroup)
            {
#>
                yield return new KV(<#= factory.Key #>, (StatelessFactoryDelegate)Create_<#= factory.Id #>);
<#
            }
#>
            }

<#
        }
#>
        }

<#
    foreach (var factory in factories)
    {
#>
        internal static object Create_<#=factory.Id#>(IResolverContext r, IScope scope)
        {
            return <#= factory.Expression #>;
        }

<#        
    }
#>
    }
}