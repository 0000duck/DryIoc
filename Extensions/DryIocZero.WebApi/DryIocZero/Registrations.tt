<#
//=======================================================================
// The code is provided by User:
// You may configure container,
// Register your services,
// And return container for resolution generation.
//
// GetContainerWithRegistrations implementation below is just an EXAMPLE!
//=======================================================================
#>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.dll.2.9.3\lib\net45\DryIoc.dll" #>
<#@ import Namespace="DryIoc" #>

<#@ assembly Name="$(SolutionDir)packages\Microsoft.AspNet.WebApi.Core.5.2.3\lib\net45\System.Web.Http.dll" #>
<#@ import Namespace="System.Web.Http.Dispatcher" #>

<#@ assembly Name="System.Core" #>
<#@ import Namespace="System.Reflection" #>

<#+
// Specify your container and registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    // TODO: Replace with your assemblies and types
    //Assembly[] assemblies = ...
    //container.RegisterMany(assemblies);

    // NOTE: RegisterDelegate and RegisterInstance are not supported because of runtime state usage. 
    // Instead you can use Register(Made.Of(() => GetSomething())) registrations which generally are preferred over Delegate/Instance
    // because container may inspect and warn you on possible resolution errors.
    // Below registration is not supported and will output error message during generation.
    // container.RegisterDelegate(_ => "delegate result", setup: Setup.With(asResolutionRoot: true));

    return container;
}

// Specify what resolution roots should be generated
bool IsResolutionRoot(ServiceRegistrationInfo info) 
{
    // TODO: By default the resolution roots set to container. You may asjust the condition to your need.
    return ControllerResolver.Default.IsController(info.ServiceType);
}

// Helps to recognize controller types
class ControllerResolver : DefaultHttpControllerTypeResolver
{
    public static readonly ControllerResolver Default = new ControllerResolver();
    public bool IsController(Type type) { return IsControllerTypePredicate(type); }
}
#>